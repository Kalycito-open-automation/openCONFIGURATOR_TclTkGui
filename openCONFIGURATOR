###############################################################################################
#
#
# NAME:     openCONFIGURATOR
#
# PURPOSE:  purpose description
#
# AUTHOR:   Kalycito Infotech Pvt Ltd
#
# COPYRIGHT NOTICE:
#
#********************************************************************************
# (c) Kalycito Infotech Private Limited
#
#  Project:      openCONFIGURATOR 
#
#  Description:  Sources all required files and Initializes the openCONFIGURATOR.
#
#
#  License:
#
#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions
#    are met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#    3. Neither the name of Kalycito Infotech Private Limited nor the names of 
#       its contributors may be used to endorse or promote products derived
#       from this software without prior written permission. For written
#       permission, please contact info@kalycito.com.
#
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#    COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGE.
#
#    Severability Clause:
#
#        If a provision of this License is or becomes illegal, invalid or
#        unenforceable in any jurisdiction, that shall not affect:
#        1. the validity or enforceability in that jurisdiction of any other
#           provision of this License; or
#        2. the validity or enforceability in other jurisdictions of that or
#           any other provision of this License.
#
#********************************************************************************
#
#  REVISION HISTORY:
# $Log:      $
###############################################################################################


#!/bin/sh
#\
exec wish "$0" ${1+"$@"}

set version 1.0.0

puts "argc->$argc argv->$argv"
if { $argc == 1 && ( $argv == "--version" || $argv == "-V" ) } {
	puts "\nDeveloped by Kalycito Powerlink Team\nopenCONFIGURATOR version $version\n"
	exit
} elseif { $argc != 0 } {
	puts "\noption $argv not supported\n"
	exit
}

set pwd [pwd]
#puts [package require Tk]
if { [ catch { package require Tk 8.5 } ] } {
	tk_messageBox -message "Package TK 8.5 not found \n please install and rerun the tool" -title Info -icon error
	exit
}

if { [ catch { package require Thread } ] } {
	tk_messageBox -message "Package Thread not found" -title Info -icon error
	exit
}

global RootDir
global home
global defaultPjtDir
global ConfigData
global infoWindow
global warWindow
global errWindow

set RootDir [pwd]

source [file join $RootDir console.tcl]
source [file join $RootDir manager.tcl]
source [file join $RootDir wrapper_interactions.tcl]
source [file join $RootDir windows.tcl]
source [file join $RootDir validation.tcl]
source [file join $RootDir operations.tcl]

set path_to_BWidget [file join $RootDir BWidget-1.2.1]
lappend auto_path $path_to_BWidget
	
package require -exact BWidget 1.2.1
Bitmap::get cut
# this used for loading Bitmap namespace into the interpretator
namespace eval Bitmap {
	lappend path [file join $RootDir images]
}

###############################################################################################
#proc initOPN_CFGRATOR
#Input       : argc, argv
#Output      : -
#Description : Calls the GUI of the application loads the so and dll
###############################################################################################
proc initOPN_CFGRATOR {argc argv} {
	global tcl_platform
	global auto_path
	global ConfigData
	global treePath
	global PjtDir
	global PjtName
	global RootDir
	global defaultPjtDir

	lappend auto_path ..
	 
	option add *TitleFrame.font {helvetica 11 bold italic}
puts "$tcl_platform(platform)==$::env(HOME)"
	if {"$tcl_platform(platform)" != "windows"} {
		option add *background #d7d5d3 userDefault
	}
	
	set home [file join $::env(HOME) Documents]
	if {[file exists $home] && ![file isfile $home]} {
		#folder exists
	} else {
		set home [file join $::env(HOME) "My Documents"]
		if { [file exists $home] && ![file isfile $home] } {
			#folder exists
		} else {
			#both the folder does not exist create new folde with Documents
			set result [tk_messageBox -message "Folder \"Documents\" and \"My Documents\" are not present. \n Do you want to create one? " -type yesno -title Info -icon error]
			switch -- $result {
				yes {
					set home [file join $::env(HOME) Documents]
					file mkdir $home
				}
				no { exit }
			}
		}
	}
	

	set defaultPjtDir [file join $home openCONFIGURATOR_Projects]
	if { [file exists $defaultPjtDir] && ![file isfile $defaultPjtDir] } {
		#directory already exists
		puts "openCONFIG_Projects directory already exists"
	} else {
		file mkdir $defaultPjtDir
	}

	wm withdraw .
	wm title . "openCONFIGURATOR"
	set chk [WindowConfig::BasicFrames]
	BWidget::place . 0 0 center
	update idletasks
	if {[info exists ConfigData(options,mainWinSize)]} {
		wm geom . $ConfigData(options,mainWinSize)
		update
	}
	after idle {
		wm deiconify .
		raise .
		focus .
		set WindowConfig::initialized 1
	}
	StartUp 


	$treePath delete end root PjtName
	
	set PjtDir ""
	set PjtName ""


	# Loading shared library
	if {"$tcl_platform(platform)" == "windows"} {
		if {[catch {load openCONFIGURATORwrapper.dll openCONFIGURATORwrapper}]} {
			tk_messageBox -message "Error loading Shared Library\nCannot proceed\nTry reinstalling the tool" -title Info -icon error
			exit
		}
	} elseif { "$tcl_platform(platform)" == "unix"} {
		if { [catch {load ./Tcl_WrapperMain.so}] } {
			tk_messageBox -message "Error loading Shared Library\nCannot proceed\nTry reinstalling the tool" -title Info -icon error
			exit
		}
	
	} else {
			tk_messageBox -message "Shared Library not created for $tcl_platform(platform) platform\nCannot proceed" -title Info -icon error
			exit
	}
	
	
	

	puts "Successfully loaded dll"

	InsertTree

}
initOPN_CFGRATOR $argc $argv
