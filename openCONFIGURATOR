################################################################################
# \file   openCONFIGURATOR
#
# \brief  Initializes all the required sources files for the openCONFIGURATOR GUI.
#
# \copyright (c) 2014, Kalycito Infotech Private Limited
#                    All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the copyright holders nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
#!/bin/sh
#\
exec wish "$0" ${1+"$@"}


if { [ catch { package require Tk } ] } {
    puts "\nPackage TK not found \nPlease install Tk to run the tool\n\npress Enter key to exit"
    gets stdin
    exit
}

if { [ catch { package require Thread } ] } {
    tk_messageBox -message "Package Thread not found" -title Info -icon error
    exit
}

package require msgcat 1.3
package require tooltip 1.4.4

#-------------------------
#   Global variables
#-------------------------
global rootDir
global defaultProjectDir
global infoWindow
global warWindow
global errWindow

global imagesDir
global resourcesDir
global libsDir
global docsDir
global tclSrcDir
global toolsDir

global linksDiscussionHelp
set linksDiscussionHelp "http://sourceforge.net/p/openconf/discussion/help/"

#-------------------------
#   Source files
#-------------------------
set rootDir [pwd]
if {"$tcl_platform(platform)" == "windows"} {
    set platformText "windows"
} elseif {"$tcl_platform(platform)" == "unix"} {
    set platformText "linux"
}

set platformDir [file join $rootDir $platformText]
set libsDir [file join $platformDir libs]
set toolsDir [file join $platformDir tools]
set imagesDir [file join $rootDir images]
set resourcesDir [file join $rootDir resources]
set docsDir [file join $rootDir docs]
set tclSrcDir [file join $rootDir tcl-sources]


tsv::set application rootDir $rootDir
source [file join $tclSrcDir openConfAPI.tcl]
source [file join $tclSrcDir openConfProjectUpgradeAPI.tcl]
source [file join $tclSrcDir projectUpgradeWindow.tcl]
source [file join $tclSrcDir console.tcl]
source [file join $tclSrcDir notebookManager.tcl]
source [file join $tclSrcDir wrapperInteractions.tcl]
source [file join $tclSrcDir childWindows.tcl]
source [file join $tclSrcDir validation.tcl]
source [file join $tclSrcDir operations.tcl]
source [file join $tclSrcDir version.tcl]

if { $argc == 1 && ( $argv == "--version" || $argv == "-V" ) } {
    puts "\nDeveloped by Kalycito Powerlink Team\nopenCONFIGURATOR version $version\n"
    exit
} elseif { $argc != 0 } {
    puts "\noption $argv not supported\n"
    exit
}


#-------------------------
#   Package Definition
#-------------------------
set path_to_BWidget [file join $tclSrcDir BWidget-1.2.1]
lappend auto_path $path_to_BWidget
package require -exact BWidget 1.2.1

# For including Tablelist Package
set path_to_Tablelist [file join $tclSrcDir tablelist4.10.1]
lappend auto_path $path_to_Tablelist
package require Tablelist
tablelist::addBWidgetComboBox


#------------------------------------------------------------------------------
# Loads the openCONFIGURATOR library using tcl-load
#------------------------------------------------------------------------------
proc LoadOpenConfiguratorLibrary {} {
    global libsDir
    global tcl_platform

    lappend auto_path $libsDir

    if {"$tcl_platform(platform)" == "windows"} {
        set ::env(Path) $libsDir\;$::env(Path)
    } elseif {"$tcl_platform(platform)" == "unix"} {
        # if it is an empty string or doesn't exist, set the LD_LIBRARY_PATH
        if { ![info exists ::env(LD_LIBRARY_PATH)] || $::env(LD_LIBRARY_PATH) == "" } {
            set ::env(LD_LIBRARY_PATH) " "
        }
        set ::env(LD_LIBRARY_PATH) $libsDir:$::env(LD_LIBRARY_PATH)
    } else {
        tk_messageBox -message "openCONFIGURATOR core libraries are not compiled for $tcl_platform(platform) platform \
        \nCannot proceed.\nContact the forum support page.\nLink: $linksDiscussionHelp" -title Info -icon error
        exit
    }

    # Loading shared libraries
    if {"$tcl_platform(platform)" == "windows"} {
        if {[catch {load openConfiguratorWrapper.dll openConfiguratorWrapper} errormessage]} {
            tk_messageBox -message "Error loading shared libraries\nCannot proceed\nConsult the user manual to troubleshoot.\nError: $errormessage" -title Info -icon error
            exit
        }
    } elseif { "$tcl_platform(platform)" == "unix"} {
        if { [catch {load $libsDir/openConfiguratorWrapper.so} errormessage] } {
            tk_messageBox -message "Error loading shared libraries\nCannot proceed\nConsult the user manual to troubleshoot.\nError: $errormessage" -title Info -icon error
            exit
        }
    } else {
        tk_messageBox -message "openCONFIGURATOR core libraries are not compiled for $tcl_platform(platform) platform \
        \nCannot proceed.\nContact the forum support page.\nLink: $linksDiscussionHelp" -title Info -icon error
        exit
    }
}

#------------------------------------------------------------------------------
# Loads the openCONFIGURATOR project upgrade library using tcl-load
#------------------------------------------------------------------------------
proc LoadOpenConfiguratorProjectUpgradeLibrary {} {
    global libsDir
    global tcl_platform

    lappend auto_path $libsDir

    if {"$tcl_platform(platform)" == "windows"} {
        set ::env(Path) $libsDir\;$::env(Path)
    } elseif {"$tcl_platform(platform)" == "unix"} {
        # if it is an empty string or doesn't exist, set the LD_LIBRARY_PATH
        if { ![info exists ::env(LD_LIBRARY_PATH)] || $::env(LD_LIBRARY_PATH) == "" } {
            set ::env(LD_LIBRARY_PATH) " "
        }
        set ::env(LD_LIBRARY_PATH) $libsDir:$::env(LD_LIBRARY_PATH)
    } else {
        tk_messageBox -message "openCONFIGURATOR project upgrade libraries are not compiled for $tcl_platform(platform) platform \
        \nCannot proceed.\nContact the forum support page.\nLink: $linksDiscussionHelp" -title Info -icon error
        exit
    }

    # Loading shared libraries
    if {"$tcl_platform(platform)" == "windows"} {
        if {[catch {load project_upgradeWrapper.dll ProjectUpgradeWrapper} errormessage]} {
            tk_messageBox -message "Error loading shared libraries\nCannot proceed\nConsult the user manual to troubleshoot.\nError: $errormessage" -title Info -icon error
            exit
        }
    } elseif { "$tcl_platform(platform)" == "unix"} {
        if { [catch {load $libsDir/project_upgradeWrapper.so Projectupgradewrapper} errormessage] } {
            tk_messageBox -message "Error loading shared libraries\nCannot proceed\nConsult the user manual to troubleshoot.\nError: $errormessage" -title Info -icon error
            exit
        }
    } else {
        tk_messageBox -message "openCONFIGURATOR project upgrade libraries are not compiled for $tcl_platform(platform) platform \
        \nCannot proceed.\nContact the forum support page.\nLink: $linksDiscussionHelp" -title Info -icon error
        exit
    }
}

#-------------------------------------------------------------------------------
#  InitOpenConfigurator
#
#  Arguments: argc - string to be validate
#         argv - Type for validation
#
#  Results: -
#
#  Description: Creates the main GUI of the application. Also loads the shared objects or
#                dynamic linked libraries based on operating system.
#-------------------------------------------------------------------------------
proc InitOpenConfigurator {argc argv} {

    global tcl_platform
    global auto_path
    global treePath
    global projectDir
    global projectName
    global imagesDir
    global resourcesDir
    global defaultProjectDir
    global homeVar
    global linksDiscussionHelp

    lappend auto_path ..

    if {"$tcl_platform(platform)" != "windows"} {
        # Background color based on OS
        option add *background #d7d5d3 userDefault
    }

    # Title frame font set for tablelist widget
    option add *TitleFrame.font {helvetica 11 bold italic}

    if {"$tcl_platform(platform)" == "windows"} {
        if { [ catch {package require registry 1.0} ] } {
            set homeVar [file join $::env(HOME) Documents]
        } else {
            set homeVar [registry get {HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders} {Personal}]
            set homeVar [file join $::env(HOME) [file tail $homeVar]]
        }
    } else {
        set homeVar [file join $::env(HOME) Documents]
    }

    if {[file exists $homeVar] && ![file isfile $homeVar]} {
        #folder exists
    } else {
        set homeVar [file join $::env(HOME) Documents]
        if {[file exists $homeVar] && ![file isfile $homeVar]} {
            #folder exists
        } else {
            file mkdir $homeVar
            tk_messageBox -message "Folder $homeVar is created" -title Info -icon info
        }
    }

    set defaultProjectDir [file join $homeVar openCONFIGURATOR_Projects]
    if { [file exists $defaultProjectDir] && ![file isfile $defaultProjectDir] } {
        #directory already exists
    } else {
        file mkdir $defaultProjectDir
    }

    # Draw the Main window
    wm withdraw .
    wm title . "openCONFIGURATOR"

    catch {
        # set element [image create photo -format gif -file [file join $imagesDir openConfig.gif] ]
        # wm iconphoto . -default $element
    }

    Operations::BasicFrames
    BWidget::place . 0 0 center
    update idletasks
    after idle {
        wm deiconify .
        raise .
        focus .
    }

    catch {
        set element [image create photo -format gif -file [file join $imagesDir openConfig.gif] ]
        wm iconphoto . -default $element
		wm withdraw .
		wm state . normal
    }

    LoadOpenConfiguratorLibrary
    LoadOpenConfiguratorProjectUpgradeLibrary

    $treePath delete end root ProjectNode
    set projectDir ""
    set projectName ""

    # Draw the Initial tree window
    Operations::InsertTree

    # Childwindow for startup project window
    set odXML [file join $resourcesDir od.xml]
    set cnXDD [file join $resourcesDir openPOWERLINK_CN.xdd]
    set mnXDD [file join $resourcesDir openPOWERLINK_MN.xdd]
    set logSettings [file join $resourcesDir boost_log_settings.ini]

    # TODO check for other dependencies here.

    if {![file isfile $odXML] || ![file isfile $cnXDD] \
    || ![file isfile $mnXDD] || ![file isfile $logSettings]} {
        tk_messageBox -message "The dependent resources could not be found.\nCannot proceed \
        \nContact the forum support page.\nLink: $linksDiscussionHelp" -title Info -icon error
        #exit
    } else {
        #od.xml is present continue
        ChildWindows::StartUp
    }
}

InitOpenConfigurator $argc $argv
